-- MySQL Script generated by MySQL Workbench
-- Fri Feb  3 12:38:58 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema db_appointment
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema db_appointment
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_appointment` DEFAULT CHARACTER SET utf8 ;
USE `db_appointment` ;

-- -----------------------------------------------------
-- Table `user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS user (
  `uid_user` char(36) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `ROLE` VARCHAR(30) NOT NULL DEFAULT 'USER_ROLE',
  `password` VARCHAR(100) NOT NULL,
  UNIQUE INDEX (`email` ASC) VISIBLE,
  PRIMARY KEY (`uid_user`),
  UNIQUE INDEX `uid_user_UNIQUE` (`uid_user` ASC) VISIBLE
  );



-- -----------------------------------------------------
-- Table `store`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `store` (
  `uid_store` char(36) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `type_store` VARCHAR(45) NOT NULL,
  `city` VARCHAR(45) NOT NULL,
  `post_code` INT NOT NULL,
  `address` VARCHAR(300) NOT NULL,
  PRIMARY KEY (`uid_store`),
  UNIQUE INDEX `uid_store_UNIQUE` (`uid_store` ASC) VISIBLE);



CREATE TABLE IF NOT EXISTS `user_has_store` (
  `user_uid` char(36) NOT NULL,
  `store_uid` char(36) NOT NULL,
  PRIMARY KEY (`user_uid`, `store_uid`),
  INDEX `fk_user_has_store_store1_idx` (`store_uid` ASC) VISIBLE,
  INDEX `fk_user_has_store_user1_idx` (`user_uid` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_store_user1`
    FOREIGN KEY (`user_uid`)
    REFERENCES `user` (`uid_user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_store_store1`
    FOREIGN KEY (`store_uid`)
    REFERENCES `store` (`uid_store`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);
-- -----------------------------------------------------
-- Table `service`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `service` (
  `uid_service` char(36) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `duration` FLOAT NULL,
  `price` FLOAT NOT NULL DEFAULT 0,
  `store_uid` char(36) NOT NULL,
  PRIMARY KEY (`uid_service`, `store_uid`),
  INDEX `fk_service_store1_idx` (`store_uid` ASC) VISIBLE,
  UNIQUE INDEX `uid_service_UNIQUE` (`uid_service` ASC) VISIBLE,
  CONSTRAINT `fk_service_store1`
    FOREIGN KEY (`store_uid`)
    REFERENCES `store` (`uid_store`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- -----------------------------------------------------
-- Table `store_service`
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `appointment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `appointment` (
  `user_uid` char(36) NOT NULL,
  `datetime_start` DATETIME NOT NULL,
  `uid_appointment` char(36) NOT NULL,
  `service_uid` char(36) NOT NULL,
  PRIMARY KEY (`uid_appointment`),
  INDEX `fk_appointment_user_idx` (`user_uid` ASC) VISIBLE,
  UNIQUE INDEX `uid_appointment_UNIQUE` (`uid_appointment` ASC) VISIBLE,
  INDEX `fk_appointment_service1_idx` (`service_uid` ASC) VISIBLE,
  CONSTRAINT `fk_appointment_user`
    FOREIGN KEY (`user_uid`)
    REFERENCES `user` (`uid_user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_appointment_service1`
    FOREIGN KEY (`service_uid`)
    REFERENCES `service` (`uid_service`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


USE `db_appointment`;

DELIMITER $$
USE `db_appointment`$$
create trigger before_insert_user
before insert
on user for each row set newUser.email = lower(trim(newUser.email))$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
